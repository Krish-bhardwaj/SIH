'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var antd = require('antd');
var dateFns = require('date-fns');
var icons = require('@ant-design/icons');
var dateFnsGenerateConfig = _interopDefault(require('rc-picker/lib/generate/dateFns'));
var generatePicker = _interopDefault(require('antd/es/date-picker/generatePicker'));
require('antd/es/date-picker/style/index');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
}

var daysToWeekObject = function daysToWeekObject(events, startWeek) {
  var dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  var weekObject = {
    sunday: [],
    monday: [],
    tuesday: [],
    wednesday: [],
    thursday: [],
    friday: [],
    saturday: []
  };

  if (events == null) {
    return weekObject;
  }

  for (var googleEventIndex in events) {
    var eventStartTimeDay = events[googleEventIndex].startTime;
    var eventEndTimeDay = events[googleEventIndex].endTime;

    if (!dateFns.isSameDay(eventStartTimeDay, eventEndTimeDay)) {
      var result = dateFns.eachDayOfInterval({
        start: eventStartTimeDay,
        end: eventEndTimeDay
      });

      for (var dayInterval in result) {
        var splitedEvent = _extends({}, events[googleEventIndex]);

        splitedEvent.startTime = result[dayInterval];
        splitedEvent.endTime = result[dayInterval];
        var weekObjectKey = dayNames[dateFns.getDay(new Date(result[dayInterval]))];
        dateFns.isSameWeek(startWeek, splitedEvent.startTime) && weekObject[weekObjectKey].push(splitedEvent);
      }
    } else {
      var _weekObjectKey = dayNames[dateFns.getDay(eventStartTimeDay)];

      weekObject[_weekObjectKey].push(events[googleEventIndex]);
    }
  }

  return weekObject;
};
var getDayHoursEvents = function getDayHoursEvents(value, weekObject) {
  var ALL_DAY_EVENT = 0;
  var events = [];

  var _loop = function _loop(i) {
    var startDate = dateFns.add(dateFns.startOfDay(dateFns.startOfWeek(value.startDate)), {
      days: 1
    });
    var hour = dateFns.addHours(startDate, i - 1);
    events.push({
      id: i,
      hourObject: hour,
      hour: i != ALL_DAY_EVENT ? dateFns.format(hour, 'hh a') : 'all-day',
      Monday: (weekObject == null ? void 0 : weekObject.monday) && (weekObject == null ? void 0 : weekObject.monday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, hour);
      })),
      Tuesday: (weekObject == null ? void 0 : weekObject.tuesday) && (weekObject == null ? void 0 : weekObject.tuesday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 1
        }));
      })),
      Wednesday: (weekObject == null ? void 0 : weekObject.wednesday) && (weekObject == null ? void 0 : weekObject.wednesday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 2
        }));
      })),
      Thursday: (weekObject == null ? void 0 : weekObject.thursday) && (weekObject == null ? void 0 : weekObject.thursday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 3
        }));
      })),
      Friday: (weekObject == null ? void 0 : weekObject.friday) && (weekObject == null ? void 0 : weekObject.friday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 4
        }));
      })),
      Saturday: (weekObject == null ? void 0 : weekObject.saturday) && (weekObject == null ? void 0 : weekObject.saturday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 5
        }));
      })),
      Sunday: (weekObject == null ? void 0 : weekObject.sunday) && (weekObject == null ? void 0 : weekObject.sunday.filter(function (e) {
        return e.allDay ? i === ALL_DAY_EVENT : dateFns.isSameHour(e.startTime, dateFns.add(hour, {
          days: 6
        }));
      }))
    });
  };

  for (var i = 0; i < 26; i++) {
    _loop(i);
  }

  return events;
};
var HOUR_TO_DECIMAL = 1.666666667;
var MIN_BOX_SIZE = 40;
var sizeEventBox = function sizeEventBox(event, hour) {
  var eventStartTime = new Date(event.startTime);
  var eventEndTime = new Date(event.endTime);
  var boxSize = Math.floor(dateFns.differenceInMinutes(eventEndTime, eventStartTime) * HOUR_TO_DECIMAL) < MIN_BOX_SIZE ? MIN_BOX_SIZE : Math.floor(dateFns.differenceInMinutes(eventEndTime, eventStartTime) * HOUR_TO_DECIMAL);
  var boxPosition = dateFns.differenceInMinutes(hour, eventStartTime) * HOUR_TO_DECIMAL > 100 ? 0 : dateFns.differenceInMinutes(eventStartTime, hour) * HOUR_TO_DECIMAL;
  return {
    boxPosition: boxPosition,
    boxSize: boxSize
  };
};

var BOX_POSITION_OFFSET = 26;
var SCROLL_TO_ROW = 19;
var TURQUOISE = '#36CFC9';
var ALL_DAY_ROW = 0;

var EventBlock = function EventBlock(_ref) {
  var event = _ref.event,
      index = _ref.index,
      hour = _ref.hour,
      events = _ref.events,
      onEventClick = _ref.onEventClick;
  var getEventDay = dateFns.getDay(new Date(event.endTime));
  var fitHourToDate = dateFns.setDay(hour, getEventDay);
  var boxStyle = event.allDay ? {
    boxSize: MIN_BOX_SIZE,
    boxPosition: index * BOX_POSITION_OFFSET
  } : sizeEventBox(event, fitHourToDate);
  var boxLeftPosition = event.allDay ? 0 : BOX_POSITION_OFFSET * index;
  return React__default.createElement("div", {
    style: {
      display: !event.allDay && dateFns.differenceInMinutes(new Date(event.endTime), fitHourToDate) === 0 ? 'none' : 'block',
      height: boxStyle.boxSize + '%',
      width: event.allDay ? 80 + '%' : 80 / events + '%',
      position: 'absolute',
      top: boxStyle.boxPosition + '%',
      left: boxLeftPosition + '%',
      borderColor: 'white',
      borderStyle: 'solid',
      borderWidth: '0.01rem',
      borderRadius: '5px',
      backgroundColor: event.backgroundColor ? event.backgroundColor : TURQUOISE,
      zIndex: 1
    },
    onClick: onEventClick ? function () {
      return onEventClick(event);
    } : undefined,
    key: index
  }, React__default.createElement("p", {
    style: {
      color: 'white',
      fontSize: '12px',
      paddingLeft: '5px'
    }
  }, event.title));
};

function Calendar(_ref2) {
  var weekDates = _ref2.weekDates,
      getDayEvents = _ref2.getDayEvents,
      onEventClick = _ref2.onEventClick,
      weekends = _ref2.weekends;
  var rowRef = React.useRef(null);
  React.useEffect(function () {
    if (rowRef.current) {
      var _rowRef$current;

      (_rowRef$current = rowRef.current) == null ? void 0 : _rowRef$current.scrollIntoView();
    }
  }, [rowRef]);
  var dayList = weekends ? ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
  var dayColumns = dayList.map(function (day, counter) {
    var columnDate = dateFns.add(new Date(weekDates.startDate), {
      days: 1 + counter
    });
    var formattedDayandMonth = dateFns.format(columnDate, 'iii') + ' ' + dateFns.format(columnDate, 'dd');
    return {
      title: formattedDayandMonth,
      dataIndex: day,
      key: day,
      width: 2,
      render: function render(events, row) {
        if (events && events.length > 0 && events instanceof Array) {
          var eventsBlock = events.map(function (event, index) {
            return React__default.createElement(EventBlock, {
              key: event.eventId,
              event: event,
              index: index,
              hour: row.hourObject,
              events: events.length,
              onEventClick: onEventClick
            });
          });
          return {
            props: {
              style: {
                position: 'relative',
                padding: '0'
              }
            },
            children: React__default.createElement(React__default.Fragment, null, eventsBlock)
          };
        }

        return undefined;
      }
    };
  });
  var hourColumn = {
    title: 'Hours',
    dataIndex: 'hour',
    key: 'hour',
    width: 1,
    render: function render(hour, _ref3, id) {
      _objectDestructuringEmpty(_ref3);

      return {
        props: {
          style: {
            width: '10%'
          }
        },
        children: SCROLL_TO_ROW === id ? React__default.createElement("div", {
          ref: rowRef
        }, hour) : React__default.createElement("div", null, hour)
      };
    }
  };
  var tableColumns = [hourColumn].concat(dayColumns);
  return React__default.createElement("div", null, React__default.createElement(antd.Table, {
    rowKey: function rowKey(record) {
      return record.id;
    },
    dataSource: getDayHoursEvents(weekDates, getDayEvents),
    columns: tableColumns,
    pagination: false,
    bordered: true,
    showHeader: true,
    onRow: function onRow(_, rowIndex) {
      if (rowIndex === ALL_DAY_ROW) {
        return {
          style: {
            backgroundColor: 'white',
            position: 'sticky',
            boxShadow: 'rgba(0, 0, 0, 0.05) -1px 4px 4px ',
            zIndex: 1,
            top: 0
          }
        };
      }

      return {};
    },
    scroll: {
      y: 1000
    }
  }));
}

var DatePicker = /*#__PURE__*/generatePicker(dateFnsGenerateConfig);

var MonthName = function MonthName(_ref) {
  var startWeek = _ref.startWeek;

  var getMonthName = function getMonthName() {
    var endOfWeekDate = dateFns.endOfWeek(startWeek);

    if (dateFns.getMonth(endOfWeekDate) == dateFns.getMonth(startWeek)) {
      return dateFns.format(startWeek, 'MMM');
    }

    return dateFns.format(startWeek, 'MMM') + '-' + dateFns.format(endOfWeekDate, 'MMM');
  };

  return React__default.createElement("div", {
    style: {
      display: 'flex',
      maxHeight: '25px'
    }
  }, React__default.createElement(antd.Typography.Title, {
    level: 5,
    style: {
      marginBottom: 0,
      marginRight: '10px'
    }
  }, getMonthName()), React__default.createElement(antd.Tag, null, "Week ", dateFns.getWeek(new Date(dateFns.addWeeks(startWeek, -1)))));
};

var CalendarHeader = function CalendarHeader(_ref2) {
  var startWeek = _ref2.startWeek,
      setStartWeek = _ref2.setStartWeek;
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(antd.Row, {
    justify: "space-between",
    style: {
      marginBottom: '20px'
    }
  }, React__default.createElement(antd.Col, {
    style: {
      display: 'flex',
      justifyContent: 'space-between'
    }
  }, React__default.createElement("div", {
    style: {
      display: 'flex',
      marginRight: '20px'
    }
  }, React__default.createElement(antd.Button, {
    onClick: function onClick() {
      return setStartWeek(dateFns.startOfWeek(new Date()));
    }
  }, "Today"), React__default.createElement("div", {
    style: {
      display: 'flex',
      padding: '0 10px'
    }
  }, React__default.createElement(antd.Button, {
    style: {
      margin: '0 5px'
    },
    onClick: function onClick() {
      return setStartWeek(dateFns.addWeeks(startWeek, -1));
    }
  }, React__default.createElement(icons.LeftOutlined, null)), React__default.createElement(antd.Button, {
    style: {
      margin: '0 5px'
    },
    onClick: function onClick() {
      return setStartWeek(dateFns.addWeeks(startWeek, 1));
    }
  }, React__default.createElement(icons.RightOutlined, null)))), React__default.createElement("div", {
    style: {
      alignSelf: 'center'
    }
  }, React__default.createElement(MonthName, {
    startWeek: startWeek
  }))), React__default.createElement(antd.Col, null, React__default.createElement(DatePicker, {
    onChange: function onChange(date) {
      if (date) {
        setStartWeek(dateFns.startOfWeek(new Date(date)));
      }
    },
    picker: "week",
    defaultValue: dateFns.startOfWeek(new Date())
  }))));
};

function WeeklyCalendar(_ref) {
  var events = _ref.events,
      onEventClick = _ref.onEventClick,
      onSelectDate = _ref.onSelectDate,
      _ref$weekends = _ref.weekends,
      weekends = _ref$weekends === void 0 ? false : _ref$weekends,
      value = _ref.value;

  var _useState = React.useState(dateFns.startOfWeek(value || new Date())),
      startWeek = _useState[0],
      setStartWeek = _useState[1];

  var weekPeriod = {
    startDate: startWeek,
    endDate: dateFns.endOfWeek(startWeek)
  };
  React.useEffect(function () {
    if (value && dateFns.startOfWeek(value).getTime() !== startWeek.getTime()) {
      setStartWeek(value);
    }
  }, [value]);
  React.useEffect(function () {
    onSelectDate && onSelectDate(startWeek);
  }, [startWeek]);
  var weekObject = daysToWeekObject(events, startWeek);
  return React__default.createElement(antd.Card, null, React__default.createElement(CalendarHeader, {
    startWeek: startWeek,
    setStartWeek: setStartWeek
  }), React__default.createElement(Calendar, {
    weekDates: weekPeriod,
    getDayEvents: weekObject,
    onEventClick: onEventClick,
    weekends: weekends
  }));
}

exports.WeeklyCalendar = WeeklyCalendar;
//# sourceMappingURL=antd-weekly-calendar.cjs.development.js.map
